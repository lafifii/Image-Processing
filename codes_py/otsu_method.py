# -*- coding: utf-8 -*-
"""Otsu_Method.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dErc-16NuU33koWGFTtPQQcFb-i8821e
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

def change_img(img, umbral):
  output = np.zeros((img.shape))
  output[img > umbral] = 255
  return output

def show_img(img):
  plt.imshow(img, cmap= 'gray')
  plt.axis('off')

def show_3images(a, b, c):
  plt.figure(figsize = (10, 10))
  plt.subplot(1,3,1)
  show_img(a)
  plt.subplot(1,3,2)
  show_img(b)
  plt.subplot(1,3,3)
  show_img(c)

  plt.show()

img = cv2.imread('rice.png', 0)
umbral = 120
output = change_img(img, umbral)

plt.subplot(1,2,1)
show_img(img)
plt.subplot(1,2,2)
show_img(output)
plt.show()

def threshold(img):
  return cv2.threshold(img,0 , 255, cv2.THRESH_OTSU + cv2.THRESH_BINARY)

ret, thres = threshold(img)
plt.subplot(1,2,1)
show_img(img)
plt.subplot(1,2,2)
show_img(thres)
plt.show()

def dilatacion(img):
  new_img = np.zeros((img.shape[0] + 2, img.shape[1] + 2), dtype = np.uint8)
  new_img[1:img.shape[0] + 1, 1 : img.shape[1] + 1] = img

  output = np.zeros_like(new_img)

  for i in range(1, new_img.shape[0] - 1):
    for j in range(1, new_img.shape[1] - 1):
      if(new_img[i, j] == 255):
        output[i , j] = output[i, j - 1] = output[i, j + 1] = output[i - 1, j] = output[i + 1, j] = 255
  
  return output[1:img.shape[0] + 1, 1:img.shape[1] + 1]

output = dilatacion(thres)

show_3images(img, thres, output)

def erosion(img):
  new_img = np.ones((img.shape[0] + 2, img.shape[1] + 2), dtype = np.uint8)
  new_img[1:img.shape[0] + 1, 1 : img.shape[1] + 1] = img

  output = np.zeros_like(new_img)

  for i in range(1, new_img.shape[0] - 1):
    for j in range(1, new_img.shape[1] - 1):
      if(new_img[i , j] == 255 and new_img[i, j - 1] == 255 and new_img[i, j + 1] == 255 and new_img[i - 1, j] == 255 and new_img[i + 1, j] == 255):
        output[i, j] = 255
  
  return output[1:img.shape[0] + 1, 1:img.shape[1] + 1]

output = erosion(thres)

show_3images(img, thres , output)

def apertura(img): #delete noise
  output = erosion(thres)
  return dilatacion(output)

def cierre(img): #close holes
  output = dilatacion(thres)
  return erosion(output)

output = apertura(thres)
show_3images(img, thres, output)

output = cierre(thres)
show_3images(img, thres, output)